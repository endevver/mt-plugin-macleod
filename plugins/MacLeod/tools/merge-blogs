#!/usr/bin/perl -w
use strict;
BEGIN { unshift @INC, qw( lib extlib ../../lib ../../extlib plugins/MacLeod/lib ) }
use MT::Bootstrap::CLI App => 'MacLeod::Tool::BlogMerge';

__END__

=head1 NAME

merge-blogs - Transfer content/associations from one blog to another

=head1 VERSION

This documentation refers to merge-blogs version 1.0.1. You can always find
the latest version of the plugin and documentation at:

  http://github.com/endevver/mt-plugin-macleod

=head1 SYNOPSIS

Usage: merge-blogs [options] SRC_BLOG TARGET_BLOG

Options:

  --perms      Also merge user/group associations (i.e. permissions)
  --cats FILE  Also merge categories/folders, w/ optional CSV control file
  --catscheck FILE  
               Skip all merge steps, test the category CSV map file then quit
  --dryrun     Run through without modifying anything
  --force      Don't prompt for confirmation of actions
  --verbose    Output more progress information
  --man        Output the man page for the utility
  --help       Output this message

Example:

  cd /path/to/mt_dir
  export MT_HOME="$(pwd)"
  mysqldump [options] DATABASE > mt-DATABASE-backup.sql
  ./plugins/MacLeod/tools/merge-blogs   \
    --dryrun --perms                    \
    --cats category_unification.csv     \
      SOURCE_BLOG DEST_BLOG

=head1 DESCRIPTION

For a high-level overview of this plugin and command-line utility, please see:

  http://github.com/endevver/mt-plugin-macleod#readme

=head2 IMPORTANT CAVEATS

This is an B<extremely powerful utility> with absolutely no facility for
rollback. Although we believe it to be entirely reliable, even the
developers of this plugin back up their database before running it or any
utility of its kind. If you don't back up your database and it gets hosed
because of a bug or because you accidentally selected the wrong options,
there's really only one person to blame and it's not the creator of this
software.

We also suggest that you use the C<--dryrun> flag first before executing
the utility without it because it serve to provide you with both some
familiarity with the command's actions as well as possible illuminate a
mistake you have made in omitting or including certain flags.

=head1 OPTIONS

The following command-line options are supported by the utility.

=over 4

=item --perms

Along with other blog content and metadata, this flag directs the utility
to migrate all of the source blog's user/group associations (i.e.
permissions) to the target blog resulting in a logical union of users and
their abilities.

For example, given the following users and roles on the source blog:

  User A - Blog admin
  User B - Designer, Commenter

And the following on the target blog:

  User B - Author, Commenter
  User C - Blog admin, Editor, Author, Commenter, Editor

Use of the --perms flag would result in the following on the target blog:

  User A - Blog admin
  User B - Author, Designer, Commenter
  User C - Blog admin, Editor, Author, Commenter, Editor

Although this is incredibly useful, it was intentionally left as an option
because of the potential for accidents (e.g. unintentional granting of user
access to the new blog and permissions escalation like in the case of User
A who just became blog admin of a blog they didn't have access to before)

=item --cats

B<NOTE: THIS IS NOT IMPLEMENTED YET. It represents only possible future
functionality.>

Along with other blog content and metadata, this flag (with no argument
specified) directs the utility to also migrate all of the source blog's
categories AND folders as well as their associations with entries and
pages to the target blog resulting in a logical union of categories with
duplicate labels collapsed into the target blog's category

For example, if the source blog has the following categories:

  Cat A (basename: cat_a)
  Cat B (basename: cat_b)
  Cat C (basename: cat_c)

And the target blog has the following:

  Cat A (basename: category_a)
  Cat D (basename: category_d)
  Cat E (basename: category_e)

The target blog will have the following after the merge:

  Cat A (basename: category_a)
  Cat B (basename: cat_b)
  Cat C (basename: cat_c)
  Cat D (basename: category_d)
  Cat E (basename: category_e)

=item --cats CSVFILE

B<NOTE: This feature currently views categories and folders as one so if
you have folders in either the source or target blog, you must specify
their treatment as well.>

If the C<--cats> flag is followed by a file path to a CSV-formatted file,
the system will use the file to inform the merge allowing you to completely
control the final set of categories.  The CSV file has the following 
structure:

=over 4

=item 1. Final category label (REQUIRED)

=item 2. Existing category ID

=item 3-Nth. Other category IDs to merge into this category

=back

In processing the CSV file, the system will load the category ID in field
2, update its C<blog_id> property and set the label to the value of field 1.
It will then proceed to update the placement records for the category in
hand as well as those associated with the category IDs in fields 3 and higher.
After updating the placement records, it will delete the now-empty
categories in fields 3-N.

If only the B<Final category label> field has a value, the system will
search the target blog and the source blog (in that order) for a matching
category/folder, using the first one found with an exactly matching label as
the canonical category in the process above.  If neither blog contains an
exactly matching category, a new category is created.

To be clear, fields three and higher are only useful to merge into the
canonical category, categories with different labels because an identically labelled category will be automatically absorbed into the canonical one.

At the end of the process, any category or folder in the source or target
blogs that is not processed (with the above methodology) as either a
canonical category or a category to be merged is deleted and will not appear
in the merged blog


=back

=item --dryrun

Carries out the actions specified by the flags and arguments provided on
the command line but makes no modifications to the database.

=item --force

Normally, the utility will output exactly what it's about to do and then
prompt you for confirmation that you want to continue.  The C<--force>
flag skips this confirmation and simply performs the action specified
by the provided flags and arguments.

=item --verbose

Output more progress information

=item --man

Output this man-formatted POD documentation.

=item --help

Outputs a short description of the utility's usage

=back

=head1 DESCRIPTION OF OPERATION

During execution, this utility does two main things:

=over 4

=item 1. MT object type and dependency tree discovery

=item 2. Object migration from source blog to target blog

=back

=head2 OBJECT TYPE AND DEPENDENCY TREE DISCOVERY

The utility first searches the MT registry for all MT::Object subclasses 
that are blog-specific.  This is significant because it enables the plugin
to work with arbitrary object classes and their datasources controlled by
third-party plugins or even future versions of Melody and MT.

The utility then takes that list and creates a dependency tree defining
which objects are parents or children of other objects.  This provides
an order for processing each object to minimize the length of time dependent
objects are orphaned.

=head2 INTER-BLOG OBJECT MIGRATION

Iterating over the ordered list of object types/classes found above, the
utility requests a database iterator for all objects of the object class in
context which are associated (by blog ID) to the source blog.  Each object
returned from the database iterator is processed by the object class'
C<merge_operation()> method, inherited from MT::Object or overridden to
provide custom functionality.

The default method (exported to MT::Object by this plugin) simply updates
the C<blog_id> column from the old source blog's value to that of the
target blog and saves the object.

This plugin overrides the method for the C<MT::Entry>, C<MT::Asset>,
C<MT::Association> and C<MT::Permission> classes to implement special
handling like extra logging of permalink and asset URL changes or
permission re-assignment which is not as straightforward as updating a blog
ID.

=head1 DEPENDENCIES

=over 4

=item * Log4MT plugin - http://github.com/endevver/mt-plugin-log4mt

Used for general purpose logging and recording of entry permalink redirects

=item * CLITool - http://github.com/endevver/mt-util-clitool

Underlying framework for all of Endevver's command-line interface (CLI) tools

=back

=head1 INCOMPATIBILITIES

No known incompatibilities.

=head1 BUGS AND LIMITATIONS

This utility does not transfer the following during a merge:

    * Templates and template maps
    * Category and placement records
    * Session records
    * Fileinfo records
    * Records from TheSchwartz-related tables

There are no known bugs in this module.  

If you are having problems installing or using the plugin, please check out 
our general knowledge base and help ticket system:

  http://help.endevver.com

=head1 COPYRIGHT

Copyright 2010, Endevver, LLC. All rights reserved.

=head1 LICENSE

This plugin is licensed under the GPL v2.

=head1 ABOUT ENDEVVER

We design and develop web sites, products and services with a focus on 
simplicity, sound design, ease of use and community. We specialize in 
Movable Type and offer numerous services and packages to help customers 
make the most of this powerful publishing platform.

http://endevver.com/

